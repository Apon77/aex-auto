#!/bin/bash
cd /tmp/rom # Depends on where source got synced
mkdir -p ~/.config/rclone
echo "$rclone_config" > ~/.config/rclone/rclone.conf # Write rclone config found from env variable, so that cloud storage can be used to upload ccache

# Normal build steps
. build/envsetup.sh
lunch aosp_mido-user
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 20G # It took only 6.4GB for mido
ccache -o compression=true # Will save times and data to download and upload ccache, also negligible performance issue
ccache -z # Clear old stats, so monitor script will provide real ccache statistics

# upload function for uploading rom zip file! I don't want unwanted builds in my google drive haha!
up(){
	curl --upload-file $1 https://transfer.sh/$(basename $1); echo
	# 14 days, 10 GB limit
}

tg(){
	bot_api=1692865707:AAGurCDwhaSZ0RwxIuFEYVpYo9kYJEYSwD0
	your_telegram_id=$1 # No need to touch 
	msg=$2 # No need to touch
	curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" --data "text=$msg&chat_id=${your_telegram_id}"
}

id=571213272 # Your telegram id

# Build command! j10 for 10 cpu, j8 for 8 cpu, otherwise memeroy will end up even its 24G
# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!

# Let's compile by parts! Coz of ram issue!
make bootimage
make api-stubs-docs || echo no problem
make system-api-stubs-docs || echo no problem
make test-api-stubs-docs || echo no problem

success_build(){
	mka bacon -j16 && time rclone copy out/target/product/mido/*.zip apon:junk -P && send_zip=$(basename out/target/product/mido/*.zip) && tg $id "Build Succeed!
https://roms.apon77.workers.dev/junk/$send_zip"
}

failed_build(){
	tmate -S /tmp/tmate.sock new-session -d
	tmate -S /tmp/tmate.sock wait tmate-ready
	send_shell=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
	tg $id "Build Failed"
	tg $id "$send_shell"
	ccache -s
	#sleep 2h
}
success_build || failed_build
ccache -s # Let's print ccache statistics finally

